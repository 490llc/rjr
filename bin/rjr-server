#!/usr/bin/ruby
# RJR server
#
# Copyright (C) 2013 Mohammed Morsi <mo@morsi.org>
# Licensed under the Apache License, Version 2.0

require 'optparse'
require 'stringio'

#require 'rjr/stats'
require 'rjr/common'
require 'rjr/nodes/easy'

##########################################################

config = { :node_id  =>  'rjr_test_server',
           :broker   =>        'localhost',
           :host     =>        'localhost',
           :tcp_port =>               8181,
           :www_port =>               8888,
           :ws_port  =>               8080 }

optparse = OptionParser.new do |opts|
  opts.on('-h', '--help', 'Display this help screen') do
    puts opts
    exit
  end

  opts.on('-i', '--id ID', 'Node ID to assign to server') do |id|
    config[:node_id] = id
  end

  opts.on('-b', '--broker broker', 'AMQP Broker') do |b|
    config[:broker] = b
  end

  opts.on('-h', '--host host', 'Host (or ip) which to listen on') do |h|
    config[:host] = host
  end

  opts.on('--tcp port', 'TCP Port to listen on') do |p|
    config[:tcp_port] = p
  end

  opts.on('--www port', 'Port to listen on for www requests') do |p|
    config[:www_port] = p
  end

  opts.on('--ws port', 'Websocket Port to listen on') do |p|
    config[:ws_port] = p
  end

end

optparse.parse!

##########################################################

NODES = {:amqp  =>  {:node_id => config[:node_id], :broker => config[:broker]},
         :ws    =>  {:node_id => config[:node_id], :host   => config[:host], :port => config[:ws_port]},
         :www   =>  {:node_id => config[:node_id], :host   => config[:host], :port => config[:www_port]},
         :tcp   =>  {:node_id => config[:node_id], :host   => config[:host], :port => config[:tcp_port]}}

cdir          = File.dirname(__FILE__)
server_path   = File.join(ENV['RJR_LOAD_PATH'] || File.join(cdir, '..', 'examples', 'server'))

##########################################################

$messages = StringIO.new

RJR::Logger.log_level = ::Logger::DEBUG
RJR::Logger.log_to $messages

node = RJR::Nodes::Easy.new(NODES)
node.dispatcher.add_modules(server_path)
node.stop_on("INT").listen.join
